HashTable is a special type of the data structure in which the insertion as well as the deletion of the keys that is the values is extremely fast is almost in the complexity of constant

So the basic idea here is that whatever the values that we are going to enter inside the hash table we are directly assigning our equating it to the index so we consider the key to be the index in an array

So basically for example if you want to store the words in a dictionary and we want to access it very fastly we can assign each and every character that is a 26 alphabet a unique number starting from a =1, b =2 so on till Z is equal to 26

At that time we will be having a unique index for each and every character in that particular word okay for example we have a word called cats: idx then would-->
c+a+t+s ie 3+1+20+19 ie 43, But then there is a limitation because the same value of 43 is the same for another words like tac,act etc

So then how do we solve it so in order to solve it we could do one thing since there are 27 alphabets including the space starting from the space to Z we can multiply the value of each character with the 27 raised to power the position of that particular bit in that particular world starting from left and indexes of zero
for ex: for cats we could write
2*27³ + 1*27² + 20*27¹ + 19*27º ===60,337 ie "cats" is 60,337 th word in array

But this is a more limitations because suppose we have 10 10 word size then the sum will count up to 700 lakh
And we have only 50,000 words in our dictionary so how do we compress this 700 lakh index into 50,000, The most optimal method is called the hashing method

So basically this 700 lakh index can be compressed into a small number by assigning or changing this particular index into the reminder that we get by dividing this 700 lakh by 1,00,000 that is 50,000*2 (coz hashing works best if we have double sized array than original caoz collisions are always possible)
ie cats's index of 60,337 for an array size 1,00,000--> we could assign cats's index as 60,337%1,00,000,,this works very good for larger numbers than 1,00,000, try checking out

arrIndex=hugeNumber%arraySize is a example for hashFunction

But this again has some limitations for example if the array size is taken to be 60, then for words having hugeNumberValue of 7 or 67 or 127 etc have same arrIndex value coz 7%60==67%60==127%60 all have values of 7,so how to we deal with this collision?

Here comes the solution and the reason why we have taken the double sized array suppose you already find that an element is already present in that particular index we search for an next weekend cell in that particular array and insert that particular element having the same huge number value into that particular empty vacant cell in this way the case of having the same huge number of value are inserted into different positions, this method is caleed OPEN ADDRESSING. There's an under method called the SEPARATE CHAINING which will link or create a linked list of same huge number values into that particular index and we run a loop for each and every linked list.

So basically there are three ways in which we will find the next weekend's sale in case of the open addressing method the 1st one is the linear probing method 2nd one being the quadratic probing and the third one is called the double hashing method


PROBE:
Suppose you want to insert some particular element inside the hash table okay so most of the items will go into the first cell that drive but some will suffer collisions and then as mentioned earlier we need to step along to find an empty cell and then insert that particular element into that particular empty cell so the number of steps they take to reach an empty cell is called the probe length and what is the meaning of probe it is the process of finding an appropriate cell following a collision


The deletion has to be done very carefully In case of an hash table because if you delete an element let us say somewhere in the hash table array and then we try to find an element which is already present in the position which is after the position where we have deleted the element so at that time the find method is going to fail because it has already encountered an empty cell so it is going to stop searching(coz the inset method directly insets into an empty cell, so if its empty how can it move forward?) so we basically don't generally delete the element in an hastable but instead we assign that particular uh index value as -1;


And the one more thing you can basically take care about is to implement wrap around if it is necessary suppose the index value reaches the size of the hash table then you can modify that particular index as:
index=index%arrSize---->wraps  around if size excced during insertion